name: Build-Samples
on: push

jobs:
  build-linux:
    name: Build Samples for Linux x64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install Dependencies
        run: | 
              sudo apt-get update -y
              sudo apt-get install -y lsb-release wget software-properties-common apt-utils
              wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
              sudo add-apt-repository -y "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main"
              sudo apt-get update -y
              sudo apt remove build-essential -y
              sudo apt-get install cmake clang-14 llvm-14 ninja-build libgl1-mesa-dev libgtk-3-dev libasound2-dev libwayland-dev libxkbcommon-dev libegl1-mesa-dev libegl1-mesa-dev libvulkan-dev libx11-xcb-dev libxcb-dri2-0-dev libxcb-glx0-dev libxcb-icccm4-dev libxcb-keysyms1-dev libxcb-randr0-dev libxrandr-dev libxxf86vm-dev mesa-common-dev -y --no-install-recommends 
      - name: Configure
        run: |
            mkdir -p build
            mkdir -p build/linux
            cd build/linux
            export CC=/usr/bin/clang-14
            export CXX=/usr/bin/clang++-14
            cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DRAVENGINE_BUILD_TESTS=OFF ../.. 
      - name: Build
        run: cd build/linux && cmake --build . --config release --target install  
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name:  RavEngine_Samples_linux64
          path:  build/linux/Release/*.AppImage
      - name: Prepare Transfer upload
        run: cd build/linux/Release ; zip -r -9 Samples.zip *.AppImage
      - name: Upload to Transfer.sh
        run: URL=`curl --upload-file build/linux/Release/Samples.zip https://transfer.sh/RavEngine_Samples_linux.zip` ; echo "::notice file=.github/workflows/build.yml::$URL" | sed "s/.sh/.sh\/get/g" 

  build-linux-arm:
    name: Build Samples for Linux arm64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup Repositories
        run: sudo mv config/crosscomp-sources.list /etc/apt/sources.list;
      - name: Check apt sources
        run: cat /etc/apt/sources.list
      - name: Add arm64 as architecture
        run: sudo dpkg --add-architecture arm64
      - name: Update APT
        run: |
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test 
            sudo apt-get update 
        continue-on-error: true
      - name: Install Host Dependencies
        run: sudo apt-get install cmake:amd64 ninja-build:amd64 libx11-dev:amd64 libgl1-mesa-dev gcc-11:amd64 g++-11:amd64 gcc-10-aarch64-linux-gnu:amd64 g++-10-aarch64-linux-gnu:amd64 -y --no-install-recommends
      - name: Install Target Dependencies
        run: sudo apt-get install libgl1-mesa-dev:arm64 libasound2-dev:arm64 libx11-dev:arm64 libxext-dev:arm64 libxrender-dev:arm64 libxrandr-dev:arm64 libxtst-dev:arm64 libxt-dev:arm64 libegl1-mesa-dev:arm64 libvulkan-dev:arm64 libx11-xcb-dev:arm64 libxcb-dri2-0-dev:arm64 libxcb-glx0-dev:arm64 libxcb-icccm4-dev:arm64 libxcb-keysyms1-dev:arm64 libxcb-randr0-dev:arm64 libxrandr-dev:arm64 libxxf86vm-dev:arm64 mesa-common-dev:arm64 -y --no-install-recommends
      - name: Configure
        run: | 
              mkdir -p build
              mkdir -p build/linuxarm
              cd build/linuxarm
              CC=/usr/bin/aarch64-linux-gnu-gcc-10 CXX=/usr/bin/aarch64-linux-gnu-g++-10 cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_SYSTEM_PROCESSOR=aarch64 -DRAVENGINE_BUILD_TESTS=OFF ../.. 
      - name: Build
        run: cd build/linuxarm && cmake --build . --config release --target install 
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name:  RavEngine_Samples_linuxARM
          path:  build/linuxarm/Release/*.AppImage
      - name: Prepare Transfer upload
        run: cd build/linuxarm/Release ; zip -r -9 Samples.zip *.AppImage
      - name: Upload to Transfer.sh
        run: URL=`curl --upload-file build/linuxarm/Release/Samples.zip https://transfer.sh/RavEngine_Samples_linuxARM.zip` ; echo "::notice file=.github/workflows/build.yml::$URL" | sed "s/.sh/.sh\/get/g"
  
  build-emscripten:
    if: ${{ false }}  # disable for now, since emscripten is not possible without WebGPU
    name: Build samples for Emscripten-Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install cmake clang python3 libgl1-mesa-dev libwayland-dev libxkbcommon-dev libegl-dev -y --no-install-recommends
      - name: Setup Emscripten
        run: git clone https://github.com/emscripten-core/emsdk.git --depth=1 && cd emsdk && ./emsdk install latest && ./emsdk activate latest && source ./emsdk_env.sh
      - name: Configure
        run: mkdir -p build && cd build; cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake .. 
      - name: Build
        run: cd build; cmake --build . --config Release --target install -- -j2
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: RavEngine_Samples_Web
          path: |
                build/Release/*.js
                build/Release/*.html
                build/Release/*.wasm
        
  build-mac:
    name: Build Samples for macOS
    runs-on: macos-12
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Configure
        run: |
          mkdir -p build
          cd build
          cmake -G "Xcode" -DCMAKE_BUILD_TYPE=Release -DRAVENGINE_BUILD_TESTS=OFF .. 
      - name: Build
        run: cd build; cmake --build . --config release --target install
      - name: Compress Samples
        run: cd build/release; zip -r -9 Samples_Mac.zip *.app
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: RavEngine_Samples_macOS
          path: build/release/Samples_Mac.zip
      - name: Upload to Transfer.sh
        run: URL=`curl --upload-file build/release/Samples_Mac.zip https://transfer.sh/RavEngine_Samples_macOS.zip` ; echo "::notice file=.github/workflows/build.yml::$URL" | sed "s/.sh/.sh\/get/g"
        
  build-ios:
    name: Build Samples for iOS (unsigned)
    runs-on: macos-12
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Configure
        run: |
          mkdir -p build
          cd build
          cmake -G "Xcode" -DCMAKE_BUILD_TYPE=Release -DENABLE_VISIBILITY=ON -DCMAKE_TOOLCHAIN_FILE=../RavEngine/deps/ios/ios.toolchain.cmake -DENABLE_ARC=OFF -DDEPLOYMENT_TARGET=14.0 -DPLATFORM=OS64COMBINED -DRAVENGINE_BUILD_TESTS=OFF ..
      - name: Build
        run: cd build; cmake --build . --config release --target install
      - name: Compress Samples
        run: cd build/release; zip -r -9 Samples_iOS.zip *.app
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: RavEngine_Samples_iOS
          path: build/release/Samples_iOS.zip
      - name: Upload to Transfer.sh
        run: URL=`curl --upload-file build/release/Samples_iOS.zip https://transfer.sh/RavEngine_Samples_iOS.zip` ; echo "::notice file=.github/workflows/build.yml::$URL" | sed "s/.sh/.sh\/get/g"
            
  build-ios-simulator:
    name: Build Samples for iOS Simulator
    runs-on: macos-12
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Configure
        run: |
          mkdir -p build
          cd build
          cmake -G "Xcode" -DCMAKE_BUILD_TYPE=Release -DENABLE_VISIBILITY=ON -DCMAKE_TOOLCHAIN_FILE=../RavEngine/deps/ios/ios.toolchain.cmake -DENABLE_ARC=OFF -DDEPLOYMENT_TARGET=14.0 -DPLATFORM=SIMULATOR64 -DRAVENGINE_BUILD_TESTS=OFF ..
      - name: Build
        run: cd build; cmake --build . --config release --target install
      - name: Compress Samples
        run: cd build/release; zip -r -9 Samples_iOS_Sim.zip *.app
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: RavEngine_Samples_iOS_Simulator
          path: build/release/Samples_iOS_Sim.zip
      - name: Upload to Transfer.sh
        run: URL=`curl --upload-file build/release/Samples_iOS_Sim.zip https://transfer.sh/RavEngine_Samples_iOS_Sim.zip` ; echo "::notice file=.github/workflows/build.yml::$URL" | sed "s/.sh/.sh\/get/g"
        
  build-tvos:
    name: Build Samples for tvOS (unsigned)
    runs-on: macos-12
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Configure
        run: |
            mkdir -p build
            cd build
            cmake -G "Xcode" -DCMAKE_BUILD_TYPE=Release -DENABLE_VISIBILITY=ON -DCMAKE_TOOLCHAIN_FILE=../RavEngine/deps/ios/ios.toolchain.cmake -DENABLE_ARC=OFF -DDEPLOYMENT_TARGET=14.0 -DPLATFORM=TVOSCOMBINED -DRAVENGINE_BUILD_TESTS=OFF ..
      - name: Build
        run: cd build; cmake --build . --config release --target install
      - name: Compress Samples
        run: cd build/release; zip -r -9 Samples_tvOS.zip *.app
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: RavEngine_Samples_tvOS
          path: build/release/Samples_tvOS.zip
      - name: Upload to Transfer.sh
        run: URL=`curl --upload-file build/release/Samples_tvOS.zip https://transfer.sh/RavEngine_Samples_tvOS.zip` ; echo "::notice file=.github/workflows/build.yml::$URL" | sed "s/.sh/.sh\/get/g"
   
  build-tvos-simulator:
    name: Build Samples for tvOS Simulator
    runs-on: macos-12
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Configure
        run: |
            mkdir -p build
            cd build
            cmake -G "Xcode" -DCMAKE_BUILD_TYPE=Release -DENABLE_VISIBILITY=ON -DCMAKE_TOOLCHAIN_FILE=../RavEngine/deps/ios/ios.toolchain.cmake -DENABLE_ARC=OFF -DDEPLOYMENT_TARGET=14.0 -DPLATFORM=SIMULATOR_TVOS -DRAVENGINE_BUILD_TESTS=OFF ..
      - name: Build
        run: cd build; cmake --build . --config release --target install
      - name: Compress Samples
        run: cd build/release; zip -r -9 Samples_tvOS_Sim.zip *.app
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: RavEngine_Samples_tvOS_Simulator
          path: build/release/Samples_tvOS_Sim.zip
      - name: Upload to Transfer.sh
        run: URL=`curl --upload-file build/release/Samples_tvOS_Sim.zip https://transfer.sh/RavEngine_Samples_tvOS_Sim.zip` ; echo "::notice file=.github/workflows/build.yml::$URL" | sed "s/.sh/.sh\/get/g"
   
  build-windows:
    name: Build samples for Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Configure
        run: |
          mkdir build
          cd build
          mkdir win 
          cd win
          cmake -DCMAKE_BUILD_TYPE=Release -DRAVENGINE_BUILD_TESTS=OFF ..\.. 
          cmake -Wno-dev ..\.. 
      - name: Build
        run: cd build; cd win; cmake --build . --config release --target install
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: RavEngine_Samples_win64
          path: |
                build\win\release\RavEngine*.exe 
                build\win\release\RavEngine*.rvedata
      - name: Prepare Transfer.sh upload
        run: Compress-Archive -Path build\win\release\*.exe,build\win\release\*.rvedata -DestinationPath SamplesWin64.zip
      - name: Upload to Transfer.sh
        run: $URL = Invoke-RestMethod -Uri https://transfer.sh/RavEngine_Samples_Win64.zip -Method PUT -InFile SamplesWin64.zip -UseDefaultCredentials ; echo "::notice file=.github/workflows/build.yml::$URL" | %{$_ -replace ".sh",".sh/get"}

  build-windows-arm:
    name: Build samples for Windows ARM64
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Configure
        run: |
            mkdir build
            cd build
            mkdir win
            cd win
            cmake -AARM64 -DCMAKE_BUILD_TYPE=Release -DRAVENGINE_BUILD_TESTS=OFF ..\..
            cmake ..\.. 
      - name: Build
        run: cd build; cd win; cmake --build . --config release --target install
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: RavEngine_Samples_winARM64
          path: |
                build\win\release\RavEngine*.exe 
                build\win\release\RavEngine*.rvedata
      - name: Prepare Transfer.sh upload
        run: Compress-Archive -Path build\win\release\*.exe,build\win\release\*.rvedata -DestinationPath SamplesWinARM64.zip
      - name: Upload to Transfer.sh
        run: $URL = Invoke-RestMethod -Uri https://transfer.sh/RavEngine_Samples_WinARM64.zip -Method PUT -InFile SamplesWinARM64.zip -UseDefaultCredentials ; echo "::notice file=.github/workflows/build.yml::$URL" | %{$_ -replace ".sh",".sh/get"}


  build-uwp:
    name: Build samples for UWP
    runs-on: windows-latest
    steps:
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.3
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Configure
        run: |
              mkdir build
              cd build
              mkdir uwp
              cd uwp
              cmake -Ax64 -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION="10.0" -DCMAKE_BUILD_TYPE=Release -DRAVENGINE_BUILD_TESTS=OFF -Wno-dev ..\.. 
              cmake -Wno-dev ..\..
      - name: Build & Publish
        run: |
              cd build\uwp 
              & "MSbuild.exe" "RavEngine_Samples_WindowsStore.sln" /p:Configuration=Release /p:AppxBundle=Always /p:AppxBundlePlatforms="x64"
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: RavEngine_Samples_uwp64
          path: build\uwp\AppPackages
      - name: Prepare Transfer.sh upload
        run: |
              Move-Item -Path build\uwp\AppPackages\ -Destination .
              Remove-Item -Path build -Recurse
              Compress-Archive -Path AppPackages\ -DestinationPath SamplesUWP64.zip
      - name: Upload to Transfer.sh
        run: $URL = Invoke-RestMethod -Uri https://transfer.sh/RavEngine_Samples_UWP64.zip -Method PUT -InFile SamplesUWP64.zip -UseDefaultCredentials ; echo "::notice file=.github/workflows/build.yml::$URL" | %{$_ -replace ".sh",".sh/get"}

  build-uwp-arm:
    name: Build samples for UWP ARM64
    runs-on: windows-latest
    steps:
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.3
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Configure
        run: | 
              mkdir build
              cd build
              mkdir uwp
              cd uwp
              cmake -AARM64 -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION="10.0" -DCMAKE_BUILD_TYPE=Release -Wno-dev -DRAVENGINE_BUILD_TESTS=OFF ..\.. 
              cmake -Wno-dev ..\..;
      - name: Build & Publish
        run: |
              cd build\uwp 
              & "MSbuild.exe" "RavEngine_Samples_WindowsStore.sln" /p:Configuration=Release /p:AppxBundle=Always /p:AppxBundlePlatforms="ARM64"
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: RavEngine_Samples_uwp64
          path: build\uwp\AppPackages
      - name: Prepare Transfer.sh upload
        run: |
              Move-Item -Path build\uwp\AppPackages\ -Destination .
              Remove-Item -Path build -Recurse
              Compress-Archive -Path AppPackages\ -DestinationPath SamplesUWPARM64.zip
      - name: Upload to Transfer.sh
        run: $URL = Invoke-RestMethod -Uri https://transfer.sh/RavEngine_Samples_UWPARM64.zip -Method PUT -InFile SamplesUWPARM64.zip -UseDefaultCredentials ; echo "::notice file=.github/workflows/build.yml::$URL" | %{$_ -replace ".sh",".sh/get"}
